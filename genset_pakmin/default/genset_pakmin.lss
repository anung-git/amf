
genset_pakmin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000038  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000009aa  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000138  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000631  00000000  00000000  00000e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d4  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000872  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000150  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 ec       	ldi	r30, 0xC0	; 192
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a0 36       	cpi	r26, 0x60	; 96
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a0 e6       	ldi	r26, 0x60	; 96
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a0 36       	cpi	r26, 0x60	; 96
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	20 d0       	rcall	.+64     	; 0x96 <main>
  56:	32 c1       	rjmp	.+612    	; 0x2bc <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <read_genset>:

#define port_on PORTB
#define pin_on PINB
#define bit_on 7
/******************************************************************************/
unsigned char read_genset(void){
  5a:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  5c:	40 ed       	ldi	r20, 0xD0	; 208
  5e:	57 e0       	ldi	r21, 0x07	; 7
	unsigned char i,a;
	for(i=0;i<10;i++){
		if(bit_is_set(pin_genset,bit_genset)){
  60:	85 9b       	sbis	0x10, 5	; 16
  62:	02 c0       	rjmp	.+4      	; 0x68 <read_genset+0xe>
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	08 95       	ret
  68:	ca 01       	movw	r24, r20
  6a:	01 97       	sbiw	r24, 0x01	; 1
  6c:	f1 f7       	brne	.-4      	; 0x6a <read_genset+0x10>
#define pin_on PINB
#define bit_on 7
/******************************************************************************/
unsigned char read_genset(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
  6e:	2f 5f       	subi	r18, 0xFF	; 255
  70:	2a 30       	cpi	r18, 0x0A	; 10
  72:	b1 f7       	brne	.-20     	; 0x60 <read_genset+0x6>
  74:	8f ef       	ldi	r24, 0xFF	; 255
		}
		a=0xff;
		_delay_ms(1);
	}
	return a;
}
  76:	08 95       	ret

00000078 <read_pln>:
/******************************************************************************/
unsigned char read_pln(void){
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	40 ed       	ldi	r20, 0xD0	; 208
  7c:	57 e0       	ldi	r21, 0x07	; 7
	unsigned char i,a;
	for(i=0;i<10;i++){
		if(bit_is_clear(pin_pln,bit_pln)){
  7e:	84 99       	sbic	0x10, 4	; 16
  80:	02 c0       	rjmp	.+4      	; 0x86 <read_pln+0xe>
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	08 95       	ret
  86:	ca 01       	movw	r24, r20
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <read_pln+0x10>
	return a;
}
/******************************************************************************/
unsigned char read_pln(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
  8c:	2f 5f       	subi	r18, 0xFF	; 255
  8e:	2a 30       	cpi	r18, 0x0A	; 10
  90:	b1 f7       	brne	.-20     	; 0x7e <read_pln+0x6>
  92:	8f ef       	ldi	r24, 0xFF	; 255
		}
		a=0xff;
		_delay_ms(1);
	}
	return a;
}
  94:	08 95       	ret

00000096 <main>:
/******************************************************************************/
int main(void){
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
	unsigned char i;
	DDRB=0xff;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	87 bb       	out	0x17, r24	; 23
	DDRD=0;
  9e:	11 ba       	out	0x11, r1	; 17
	wdt_enable(WDTO_2S);
  a0:	2f e0       	ldi	r18, 0x0F	; 15
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	a8 95       	wdr
  ac:	81 bd       	out	0x21, r24	; 33
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	21 bd       	out	0x21, r18	; 33
  b2:	88 ee       	ldi	r24, 0xE8	; 232
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	28 ec       	ldi	r18, 0xC8	; 200
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x24>
  c4:	20 e0       	ldi	r18, 0x00	; 0
	_delay_ms(100);
	while(1){
		while(read_pln()){	//pln hidup
			DDRB=0xff;
  c6:	af ef       	ldi	r26, 0xFF	; 255
			DDRD=0;
			PORTD=0xef;
  c8:	bf ee       	ldi	r27, 0xEF	; 239
			PORTB=0x03;		
  ca:	13 e0       	ldi	r17, 0x03	; 3
  cc:	60 ed       	ldi	r22, 0xD0	; 208
  ce:	77 e0       	ldi	r23, 0x07	; 7
				if(read_genset()) break;
				}
				do{
					if(read_genset()){
						wdt_reset();
						PORTB=0x8f;
  d0:	48 ec       	ldi	r20, 0xC8	; 200
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	0f e8       	ldi	r16, 0x8F	; 143
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <__stack+0x5>
}
/******************************************************************************/
unsigned char read_pln(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
		if(bit_is_clear(pin_pln,bit_pln)){
  d8:	84 9b       	sbis	0x10, 4	; 16
  da:	07 c0       	rjmp	.+14     	; 0xea <__stack+0xb>
  dc:	cb 01       	movw	r24, r22
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x48>
	return a;
}
/******************************************************************************/
unsigned char read_pln(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
  e2:	2f 5f       	subi	r18, 0xFF	; 255
  e4:	2a 30       	cpi	r18, 0x0A	; 10
  e6:	c0 f3       	brcs	.-16     	; 0xd8 <main+0x42>
  e8:	dd c0       	rjmp	.+442    	; 0x2a4 <__stack+0x1c5>
  ea:	20 e0       	ldi	r18, 0x00	; 0
		if(bit_is_clear(pin_pln,bit_pln)){
  ec:	84 9b       	sbis	0x10, 4	; 16
  ee:	07 c0       	rjmp	.+14     	; 0xfe <__stack+0x1f>
  f0:	cb 01       	movw	r24, r22
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <__stack+0x13>
	return a;
}
/******************************************************************************/
unsigned char read_pln(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	2a 30       	cpi	r18, 0x0A	; 10
  fa:	c1 f7       	brne	.-16     	; 0xec <__stack+0xd>
  fc:	c9 c0       	rjmp	.+402    	; 0x290 <__stack+0x1b1>
			PORTB=0x03;		
			wdt_reset();
		}
/******************************************************************************/
		if(!read_pln()){	//pln mati
			PORTB=0;		//matikan output
  fe:	18 ba       	out	0x18, r1	; 24
			DDRB=0xff;
 100:	a7 bb       	out	0x17, r26	; 23
			DDRD=0;
 102:	11 ba       	out	0x11, r1	; 17
			PORTD=0xef;
 104:	b2 bb       	out	0x12, r27	; 18
			sbi(port_on,bit_on);	//hidupkan genset
 106:	c7 9a       	sbi	0x18, 7	; 24
 108:	88 ee       	ldi	r24, 0xE8	; 232
 10a:	93 e0       	ldi	r25, 0x03	; 3
 10c:	fa 01       	movw	r30, r20
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <__stack+0x2f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 112:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 114:	d9 f7       	brne	.-10     	; 0x10c <__stack+0x2d>
 116:	30 e0       	ldi	r19, 0x00	; 0
			_delay_ms(100);
			for(i=0;i<3;i++){
				sbi(port_start,bit_start);	//hidupkan starter
 118:	c6 9a       	sbi	0x18, 6	; 24
 11a:	80 e1       	ldi	r24, 0x10	; 16
 11c:	97 e2       	ldi	r25, 0x27	; 39
 11e:	fa 01       	movw	r30, r20
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <__stack+0x41>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 126:	d9 f7       	brne	.-10     	; 0x11e <__stack+0x3f>
				_delay_ms(1000);
				wdt_reset();
 128:	a8 95       	wdr
 12a:	80 e1       	ldi	r24, 0x10	; 16
 12c:	97 e2       	ldi	r25, 0x27	; 39
 12e:	fa 01       	movw	r30, r20
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <__stack+0x51>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 134:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 136:	d9 f7       	brne	.-10     	; 0x12e <__stack+0x4f>
				_delay_ms(1000);
				wdt_reset();
 138:	a8 95       	wdr
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	97 e2       	ldi	r25, 0x27	; 39
 13e:	fa 01       	movw	r30, r20
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <__stack+0x61>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 144:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 146:	d9 f7       	brne	.-10     	; 0x13e <__stack+0x5f>
				_delay_ms(1000);
				wdt_reset();
 148:	a8 95       	wdr
 14a:	80 e1       	ldi	r24, 0x10	; 16
 14c:	97 e2       	ldi	r25, 0x27	; 39
 14e:	fa 01       	movw	r30, r20
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <__stack+0x71>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 154:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 156:	d9 f7       	brne	.-10     	; 0x14e <__stack+0x6f>
				_delay_ms(1000);
				wdt_reset();
 158:	a8 95       	wdr
 15a:	80 e1       	ldi	r24, 0x10	; 16
 15c:	97 e2       	ldi	r25, 0x27	; 39
 15e:	fa 01       	movw	r30, r20
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <__stack+0x81>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 164:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 166:	d9 f7       	brne	.-10     	; 0x15e <__stack+0x7f>
				_delay_ms(1000);
				wdt_reset();
 168:	a8 95       	wdr
				cbi(port_start,bit_start);	//matikan starter
 16a:	c6 98       	cbi	0x18, 6	; 24
 16c:	80 e1       	ldi	r24, 0x10	; 16
 16e:	97 e2       	ldi	r25, 0x27	; 39
 170:	fa 01       	movw	r30, r20
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <__stack+0x93>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 176:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 178:	d9 f7       	brne	.-10     	; 0x170 <__stack+0x91>
				_delay_ms(1000);
				wdt_reset();
 17a:	a8 95       	wdr
 17c:	80 e1       	ldi	r24, 0x10	; 16
 17e:	97 e2       	ldi	r25, 0x27	; 39
 180:	fa 01       	movw	r30, r20
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <__stack+0xa3>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 186:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 188:	d9 f7       	brne	.-10     	; 0x180 <__stack+0xa1>
				_delay_ms(1000);
				wdt_reset();
 18a:	a8 95       	wdr
 18c:	80 e1       	ldi	r24, 0x10	; 16
 18e:	97 e2       	ldi	r25, 0x27	; 39
 190:	fa 01       	movw	r30, r20
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <__stack+0xb3>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 196:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 198:	d9 f7       	brne	.-10     	; 0x190 <__stack+0xb1>
				_delay_ms(1000);
				wdt_reset();
 19a:	a8 95       	wdr
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	97 e2       	ldi	r25, 0x27	; 39
 1a0:	fa 01       	movw	r30, r20
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <__stack+0xc3>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a8:	d9 f7       	brne	.-10     	; 0x1a0 <__stack+0xc1>
				_delay_ms(1000);
				wdt_reset();
 1aa:	a8 95       	wdr
 1ac:	80 e1       	ldi	r24, 0x10	; 16
 1ae:	97 e2       	ldi	r25, 0x27	; 39
 1b0:	fa 01       	movw	r30, r20
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <__stack+0xd3>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__stack+0xd1>
				_delay_ms(1000);
				wdt_reset();
 1ba:	a8 95       	wdr
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	97 e2       	ldi	r25, 0x27	; 39
 1c0:	fa 01       	movw	r30, r20
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <__stack+0xe3>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__stack+0xe1>
				_delay_ms(1000);
				wdt_reset();
 1ca:	a8 95       	wdr
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	97 e2       	ldi	r25, 0x27	; 39
 1d0:	fa 01       	movw	r30, r20
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <__stack+0xf3>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__stack+0xf1>
				_delay_ms(1000);
				wdt_reset();
 1da:	a8 95       	wdr
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	97 e2       	ldi	r25, 0x27	; 39
 1e0:	fa 01       	movw	r30, r20
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <__stack+0x103>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e8:	d9 f7       	brne	.-10     	; 0x1e0 <__stack+0x101>
				_delay_ms(1000);
				wdt_reset();
 1ea:	a8 95       	wdr
 1ec:	80 e1       	ldi	r24, 0x10	; 16
 1ee:	97 e2       	ldi	r25, 0x27	; 39
 1f0:	fa 01       	movw	r30, r20
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <__stack+0x113>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f8:	d9 f7       	brne	.-10     	; 0x1f0 <__stack+0x111>
				_delay_ms(1000);
				wdt_reset();
 1fa:	a8 95       	wdr
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	97 e2       	ldi	r25, 0x27	; 39
 200:	fa 01       	movw	r30, r20
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <__stack+0x123>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 206:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 208:	d9 f7       	brne	.-10     	; 0x200 <__stack+0x121>
				_delay_ms(1000);
				wdt_reset();
 20a:	a8 95       	wdr
 20c:	20 e0       	ldi	r18, 0x00	; 0
}
/******************************************************************************/
unsigned char read_pln(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
		if(bit_is_clear(pin_pln,bit_pln)){
 20e:	84 9b       	sbis	0x10, 4	; 16
 210:	07 c0       	rjmp	.+14     	; 0x220 <__stack+0x141>
 212:	cb 01       	movw	r24, r22
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <__stack+0x135>
	return a;
}
/******************************************************************************/
unsigned char read_pln(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
 218:	2f 5f       	subi	r18, 0xFF	; 255
 21a:	2a 30       	cpi	r18, 0x0A	; 10
 21c:	c1 f7       	brne	.-16     	; 0x20e <__stack+0x12f>
 21e:	16 c0       	rjmp	.+44     	; 0x24c <__stack+0x16d>
 220:	20 e0       	ldi	r18, 0x00	; 0
#define bit_on 7
/******************************************************************************/
unsigned char read_genset(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
		if(bit_is_set(pin_genset,bit_genset)){
 222:	85 99       	sbic	0x10, 5	; 16
 224:	07 c0       	rjmp	.+14     	; 0x234 <__stack+0x155>
 226:	cb 01       	movw	r24, r22
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <__stack+0x149>
#define pin_on PINB
#define bit_on 7
/******************************************************************************/
unsigned char read_genset(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
 22c:	2f 5f       	subi	r18, 0xFF	; 255
 22e:	2a 30       	cpi	r18, 0x0A	; 10
 230:	c1 f7       	brne	.-16     	; 0x222 <__stack+0x143>
 232:	0c c0       	rjmp	.+24     	; 0x24c <__stack+0x16d>
			DDRB=0xff;
			DDRD=0;
			PORTD=0xef;
			sbi(port_on,bit_on);	//hidupkan genset
			_delay_ms(100);
			for(i=0;i<3;i++){
 234:	3f 5f       	subi	r19, 0xFF	; 255
 236:	33 30       	cpi	r19, 0x03	; 3
 238:	09 f0       	breq	.+2      	; 0x23c <__stack+0x15d>
 23a:	6e cf       	rjmp	.-292    	; 0x118 <__stack+0x39>
 23c:	07 c0       	rjmp	.+14     	; 0x24c <__stack+0x16d>
#define bit_on 7
/******************************************************************************/
unsigned char read_genset(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
		if(bit_is_set(pin_genset,bit_genset)){
 23e:	85 99       	sbic	0x10, 5	; 16
 240:	09 c0       	rjmp	.+18     	; 0x254 <__stack+0x175>
 242:	cb 01       	movw	r24, r22
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <__stack+0x165>
#define pin_on PINB
#define bit_on 7
/******************************************************************************/
unsigned char read_genset(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	01 c0       	rjmp	.+2      	; 0x24e <__stack+0x16f>
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	2a 30       	cpi	r18, 0x0A	; 10
 250:	b0 f3       	brcs	.-20     	; 0x23e <__stack+0x15f>
 252:	2f c0       	rjmp	.+94     	; 0x2b2 <__stack+0x1d3>
 254:	80 e1       	ldi	r24, 0x10	; 16
 256:	97 e2       	ldi	r25, 0x27	; 39
 258:	fa 01       	movw	r30, r20
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <__stack+0x17b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 260:	d9 f7       	brne	.-10     	; 0x258 <__stack+0x179>
						wdt_reset();
						PORTB=0x8f;
					}//genset hidup
					else{
						_delay_ms(1000);
						wdt_reset();
 262:	a8 95       	wdr
						sbi(port_buzer,bit_buzer);
 264:	c4 9a       	sbi	0x18, 4	; 24
 266:	80 e1       	ldi	r24, 0x10	; 16
 268:	97 e2       	ldi	r25, 0x27	; 39
 26a:	fa 01       	movw	r30, r20
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <__stack+0x18d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 270:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 272:	d9 f7       	brne	.-10     	; 0x26a <__stack+0x18b>
						_delay_ms(1000);
						wdt_reset();
 274:	a8 95       	wdr
						PORTB=0;
 276:	18 ba       	out	0x18, r1	; 24
 278:	20 e0       	ldi	r18, 0x00	; 0
}
/******************************************************************************/
unsigned char read_pln(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
		if(bit_is_clear(pin_pln,bit_pln)){
 27a:	84 99       	sbic	0x10, 4	; 16
 27c:	02 c0       	rjmp	.+4      	; 0x282 <__stack+0x1a3>
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	de cf       	rjmp	.-68     	; 0x23e <__stack+0x15f>
 282:	cb 01       	movw	r24, r22
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <__stack+0x1a5>
	return a;
}
/******************************************************************************/
unsigned char read_pln(void){
	unsigned char i,a;
	for(i=0;i<10;i++){
 288:	2f 5f       	subi	r18, 0xFF	; 255
 28a:	2a 30       	cpi	r18, 0x0A	; 10
 28c:	b1 f7       	brne	.-20     	; 0x27a <__stack+0x19b>
 28e:	14 c0       	rjmp	.+40     	; 0x2b8 <__stack+0x1d9>
						PORTB=0;
					}//genset mati
				}while(!read_pln());
			wdt_reset();
		}
		PORTB=0;		//matikan output
 290:	18 ba       	out	0x18, r1	; 24
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	97 e2       	ldi	r25, 0x27	; 39
 296:	fa 01       	movw	r30, r20
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <__stack+0x1b9>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29e:	d9 f7       	brne	.-10     	; 0x296 <__stack+0x1b7>
		_delay_ms(1000);
/******************************************************************************/
		wdt_reset();
 2a0:	a8 95       	wdr
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <__stack+0x1cf>
	DDRD=0;
	wdt_enable(WDTO_2S);
	_delay_ms(100);
	while(1){
		while(read_pln()){	//pln hidup
			DDRB=0xff;
 2a4:	a7 bb       	out	0x17, r26	; 23
			DDRD=0;
 2a6:	11 ba       	out	0x11, r1	; 17
			PORTD=0xef;
 2a8:	b2 bb       	out	0x12, r27	; 18
			PORTB=0x03;		
 2aa:	18 bb       	out	0x18, r17	; 24
			wdt_reset();
 2ac:	a8 95       	wdr
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	13 cf       	rjmp	.-474    	; 0xd8 <main+0x42>
				if(read_pln()) break;
				if(read_genset()) break;
				}
				do{
					if(read_genset()){
						wdt_reset();
 2b2:	a8 95       	wdr
						PORTB=0x8f;
 2b4:	08 bb       	out	0x18, r16	; 24
 2b6:	e0 cf       	rjmp	.-64     	; 0x278 <__stack+0x199>
						_delay_ms(1000);
						wdt_reset();
						PORTB=0;
					}//genset mati
				}while(!read_pln());
			wdt_reset();
 2b8:	a8 95       	wdr
 2ba:	ea cf       	rjmp	.-44     	; 0x290 <__stack+0x1b1>

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
